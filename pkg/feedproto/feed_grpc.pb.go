// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/feedproto/feed.proto

package feedproto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedServiceClient is the client API for FeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedServiceClient interface {
	AddSite(ctx context.Context, in *Site, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSites(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Sites, error)
	UpdateSite(ctx context.Context, in *Site, opts ...grpc.CallOption) (*empty.Empty, error)
	UpsertArticle(ctx context.Context, in *ArticleSite, opts ...grpc.CallOption) (*ArticleIdentifier, error)
	GetArticles(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ArticlesSite, error)
	GetArticlesWithSite(ctx context.Context, in *SiteId, opts ...grpc.CallOption) (*Articles, error)
}

type feedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedServiceClient(cc grpc.ClientConnInterface) FeedServiceClient {
	return &feedServiceClient{cc}
}

func (c *feedServiceClient) AddSite(ctx context.Context, in *Site, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/feedproto.FeedService/AddSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) GetSites(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Sites, error) {
	out := new(Sites)
	err := c.cc.Invoke(ctx, "/feedproto.FeedService/GetSites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) UpdateSite(ctx context.Context, in *Site, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/feedproto.FeedService/UpdateSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) UpsertArticle(ctx context.Context, in *ArticleSite, opts ...grpc.CallOption) (*ArticleIdentifier, error) {
	out := new(ArticleIdentifier)
	err := c.cc.Invoke(ctx, "/feedproto.FeedService/UpsertArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) GetArticles(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ArticlesSite, error) {
	out := new(ArticlesSite)
	err := c.cc.Invoke(ctx, "/feedproto.FeedService/GetArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) GetArticlesWithSite(ctx context.Context, in *SiteId, opts ...grpc.CallOption) (*Articles, error) {
	out := new(Articles)
	err := c.cc.Invoke(ctx, "/feedproto.FeedService/GetArticlesWithSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServiceServer is the server API for FeedService service.
// All implementations must embed UnimplementedFeedServiceServer
// for forward compatibility
type FeedServiceServer interface {
	AddSite(context.Context, *Site) (*empty.Empty, error)
	GetSites(context.Context, *empty.Empty) (*Sites, error)
	UpdateSite(context.Context, *Site) (*empty.Empty, error)
	UpsertArticle(context.Context, *ArticleSite) (*ArticleIdentifier, error)
	GetArticles(context.Context, *empty.Empty) (*ArticlesSite, error)
	GetArticlesWithSite(context.Context, *SiteId) (*Articles, error)
	mustEmbedUnimplementedFeedServiceServer()
}

// UnimplementedFeedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeedServiceServer struct {
}

func (UnimplementedFeedServiceServer) AddSite(context.Context, *Site) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSite not implemented")
}
func (UnimplementedFeedServiceServer) GetSites(context.Context, *empty.Empty) (*Sites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSites not implemented")
}
func (UnimplementedFeedServiceServer) UpdateSite(context.Context, *Site) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSite not implemented")
}
func (UnimplementedFeedServiceServer) UpsertArticle(context.Context, *ArticleSite) (*ArticleIdentifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertArticle not implemented")
}
func (UnimplementedFeedServiceServer) GetArticles(context.Context, *empty.Empty) (*ArticlesSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticles not implemented")
}
func (UnimplementedFeedServiceServer) GetArticlesWithSite(context.Context, *SiteId) (*Articles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticlesWithSite not implemented")
}
func (UnimplementedFeedServiceServer) mustEmbedUnimplementedFeedServiceServer() {}

// UnsafeFeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServiceServer will
// result in compilation errors.
type UnsafeFeedServiceServer interface {
	mustEmbedUnimplementedFeedServiceServer()
}

func RegisterFeedServiceServer(s grpc.ServiceRegistrar, srv FeedServiceServer) {
	s.RegisterService(&FeedService_ServiceDesc, srv)
}

func _FeedService_AddSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Site)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).AddSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedproto.FeedService/AddSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).AddSite(ctx, req.(*Site))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_GetSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).GetSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedproto.FeedService/GetSites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).GetSites(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_UpdateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Site)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).UpdateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedproto.FeedService/UpdateSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).UpdateSite(ctx, req.(*Site))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_UpsertArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleSite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).UpsertArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedproto.FeedService/UpsertArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).UpsertArticle(ctx, req.(*ArticleSite))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_GetArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).GetArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedproto.FeedService/GetArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).GetArticles(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_GetArticlesWithSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiteId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).GetArticlesWithSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedproto.FeedService/GetArticlesWithSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).GetArticlesWithSite(ctx, req.(*SiteId))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedService_ServiceDesc is the grpc.ServiceDesc for FeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feedproto.FeedService",
	HandlerType: (*FeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSite",
			Handler:    _FeedService_AddSite_Handler,
		},
		{
			MethodName: "GetSites",
			Handler:    _FeedService_GetSites_Handler,
		},
		{
			MethodName: "UpdateSite",
			Handler:    _FeedService_UpdateSite_Handler,
		},
		{
			MethodName: "UpsertArticle",
			Handler:    _FeedService_UpsertArticle_Handler,
		},
		{
			MethodName: "GetArticles",
			Handler:    _FeedService_GetArticles_Handler,
		},
		{
			MethodName: "GetArticlesWithSite",
			Handler:    _FeedService_GetArticlesWithSite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/feedproto/feed.proto",
}
